{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1aef8306.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id}) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} /> \n\t\t<div>\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{email}</p>\n\t\t</div>\n\t\t</div>\n\t);\n\t\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\tif (true) {\n\t\t// throw new Error('Noooooo!');\n\t}\n\treturn ( \n\t<div>\n\t\t{\n\t\t\trobots.map((user, i) => {\n\t\t\treturn (\n\t\t<Card \n\t\t\tkey={i} \n\t\t\tid={robots[i].id} \n\t\t\tname={robots[i].name} \n\t\t\temail={robots[i].email}\n\t\t\t/>\t\n\t\t\t);\n\t\t})\n\n\t\t}\n\t\t</div>\t\t\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}>\n\t\t{props.children}\n\t\t</div>\n\t);\n};\n\n\nexport default Scroll;","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n// import ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\t\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots= robots.filter(robot =>{\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t})\n\treturn isPending ?\n\t<h1>Loading</h1> :\n\t(\n\t\t<div className='tc'>\n\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t<Scroll>\n\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t</Scroll>\n\t\t</div>\n\t  );\n\t}\n  }\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst intialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=intialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst intialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=intialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\treturn Object.assign({}, state, {isPending: true})\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t return Object.assign({}, state, {robots: action.payload, isPending: false})\n\t\t case REQUEST_ROBOTS_FAILED:\n\t\t \treturn Object.assign({}, state, { error: action.payload, isPending: false})\n\t\t default:\n\t\t \t  return state;\n\t}\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\t\t\t<Provider store={store}>\n\t\t\t <App />\n\t\t\t </Provider>,\n\t\t\t \tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}